name: Reusable Tag Deployment

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deployment environment (dev, qa, prod)'
        required: true
        type: string
      tag-pattern:
        description: 'Git tag pattern to trigger deployment'
        required: true
        type: string
      node-version:
        description: 'Node.js version'
        required: false
        type: string
        default: '20'
      install-command:
        description: 'Package installation command'
        required: false
        type: string
        default: 'yarn install --immutable'
      build-command:
        description: 'Build command'
        required: false
        type: string
        default: 'yarn build-storybook'
      build-path:
        description: 'Build output directory'
        required: false
        type: string
        default: 'storybook-static'
      s3-bucket:
        description: 'S3 bucket name'
        required: true
        type: string
      s3-folder:
        description: 'S3 folder path'
        required: false
        type: string
        default: ''
      actions-repo:
        description: 'Repository containing reusable actions'
        required: false
        type: string
        default: 'SKILL-FAMILIAR-PJ/devops-template'
      actions-ref:
        description: 'Ref of actions repository'
        required: false
        type: string
        default: 'main'
      teams-title:
        description: 'Teams notification title'
        required: false
        type: string
        default: 'Deployment Notification'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      TEAMS_WEBHOOK_URL:
        required: false

permissions:
  contents: write
  packages: read

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      commit-hash: ${{ steps.get-commit.outputs.commit-hash }}
      commit-message: ${{ steps.get-commit.outputs.commit-message }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js Environment
        uses: ${{ inputs.actions-repo }}/setup-node@${{ inputs.actions-ref }}
        with:
          node-version: ${{ inputs.node-version }}
          install-command: ${{ inputs.install-command }}

      - name: Update Package Version
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/}"
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          if [ "$TAG_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to $TAG_VERSION"
            npm version "$TAG_VERSION" --no-git-tag-version --allow-same-version
          else
            echo "Version $TAG_VERSION already matches package.json"
          fi

      - name: Build Storybook
        uses: ${{ inputs.actions-repo }}/build-storybook@${{ inputs.actions-ref }}
        with:
          build-command: ${{ inputs.build-command }}
          build-path: ${{ inputs.build-path }}

      - name: Get Version Info
        id: get-version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Get Commit Info
        id: get-commit
        run: |
          echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "commit-message=$(git log -1 --pretty=%B | head -n 1)" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    environment: ${{ inputs.environment }}

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: storybook-static
          path: ${{ inputs.build-path }}

      - name: Deploy to S3
        uses: ${{ inputs.actions-repo }}/deploy-s3@${{ inputs.actions-ref }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          s3-bucket: ${{ inputs.s3-bucket }}
          s3-folder: ${{ inputs.s3-folder }}
          build-path: ${{ inputs.build-path }}

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build, deploy]
    if: always() && secrets.TEAMS_WEBHOOK_URL != ''

    steps:
      - name: Notify Teams
        uses: ${{ inputs.actions-repo }}/notify-teams@${{ inputs.actions-ref }}
        with:
          webhook-url: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: ${{ inputs.teams-title }}
          environment: ${{ inputs.environment }}
          version: ${{ needs.build.outputs.version }}
          commit-hash: ${{ needs.build.outputs.commit-hash }}
          commit-message: ${{ needs.build.outputs.commit-message }}
          deployment-status: ${{ needs.deploy.result }}
          repository: ${{ github.repository }}
